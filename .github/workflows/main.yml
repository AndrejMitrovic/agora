# Github worflow to test Agora on a variety of platforms
#
# Also uploads the documentation to Github pages.
#
# Note:
# - Try to use the native Github action syntax (${{ expression }}) when possible,
#   as they are substituted with their value in the logs, unlike env variable.
#   For example use `${{ github.workspace }}` over `${GITHUB_WORKSPACE}`
name: CI

on: [push, pull_request]

jobs:
  main:
    name: Run
    # The configuration matrix: We define all possible combinations here,
    # then add excludes for things we don't want to test,
    # and include to specify job-specific data.
    strategy:
      # Disable `fail-fast` because we want the whole test suite to run even if one
      # of the nigthly is broken
      fail-fast: false
      matrix:
        os: [ macOS-10.15 ]
        dc: [ ldc-master, ldc-1.21.0, ldc-1.20.1 ]
        # Define job-specific parameters
        include:
          # By default, don't generate artifacts for push
          - { artifacts: false }
          # Only generate when `ldc-1.21.0` is used
          # IMPORTANT: Update this when the compiler support is changed!
          - { dc: ldc-1.21.0, artifacts: true }

    runs-on: self-hosted
    timeout-minutes: 30
    steps:

    # Checkout this repository and its submodules
    - uses: actions/checkout@v2
      with:
        submodules: true
        persist-credentials: false

    # Install os-specific packages
    # Those will show up in the list of steps, but be grayed out,
    # hence the usage of the `[OSX]` tag
    - name: '[OSX] Install dependencies & setup environment'
      if: runner.os == 'macOS'
      run: |
        echo ::set-env name=LIBRARY_PATH::${LD_LIBRARY_PATH-}:/usr/local/lib/
        echo ::set-env name=PKG_CONFIG_PATH::/usr/local/opt/sqlite/lib/pkgconfig:/usr/local/opt/openssl@1.1/lib/pkgconfig/

    - name: '[Windows] Install dependencies & setup environment'
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        $url = "https://github.com/jedisct1/libsodium/releases/download/1.0.18-RELEASE/libsodium-1.0.18-msvc.zip"
        $sha256hash = "C1D48D85C9361E350931FFE5067559CD7405A697C655D26955FB568D1084A5F4"
        Write-Host ('Downloading {0} ...' -f $url)
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        # See https://github.com/PowerShell/PowerShell/issues/2138
        $ProgressPreference = 'SilentlyContinue'
        New-Item -ItemType directory -Path ${{ github.workspace }}\lib\
        Invoke-WebRequest -Uri $url -OutFile '${{ github.workspace }}\lib\libsodium.zip'
        if ((Get-FileHash '${{ github.workspace }}\lib\libsodium.zip' -Algorithm "SHA256").Hash -ne $sha256hash) {
          exit 1
        }
        Expand-Archive '${{ github.workspace }}\lib\libsodium.zip' -DestinationPath ${{ github.workspace }}\lib\
        echo "::set-env name=LIB::${{ github.workspace }}\lib\libsodium\x64\Release\v142\static\;${{ github.workspace }}\submodules\d2sqlite3\lib\win64\;$LIB"
        echo "::set-env name=INCLUDE::${{ github.workspace }}\lib\libsodium\include\;$INCLUDE"

    # Add whatever debugging information can be useful in the long run here
    - name: Print system informations
      shell: bash
      run: |
        ${DC} --version
        dub --version

    # Build and run the tests
    - name: '[POSIX] Build & test Agora'
      if: runner.os != 'Windows'
      #continue-on-error: matrix.dc == 'ldc-master'
      run: ./ci/run.sh

    - name: '[Windows] Build & test Agora'
      if: runner.os == 'Windows'
      #continue-on-error: matrix.dc == 'ldc-master'
      shell: cmd
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        call ci\run.bat
